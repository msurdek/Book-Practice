h <- hist(x,
breaks = 12,
col = "red",
xlab = "Miles Per Gallon",
main = "Histogram with normal curve and box")
xfit <- seq(min(x),max(x),length = 40)
yfit <- dnorm(xfit,mean = mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit,yfit,col = "blue", lwd=2)
box()
#kernel density plots
par(mfrow-c(2,1))
#kernel density plots
par(mfrow=c(2,1))
d <- density(mtcars$mpg)
plot(d)
plot(d,main = "Kernel Density Of Miles Per Gallon")
polygon(d,col = "red",border = "blue")
rug(mtcars$mpg,col = "brown")
#comparative kernel density plots
library(sm)
#comparative kernel density plots
install.packages(sm)
#comparative kernel density plots
install.packages("sm")
library(sm)
attach(mtcars)
cyl.f <- factor(cyl, levels = c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
sm.density.compare(mpg,cyl,xlab = "Miles Per Gallon",)
title(main = "MPG Distribution By Car Cylinders")
colfill <- c(2:(1+length(levels(cyl.f))))
legend(locator(1),levels(cyl.f),fill = colfill)
detach(mtcars)
par(mfrow=c(1,1))
attach(mtcars)
cyl.f <- factor(cyl, levels = c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
sm.density.compare(mpg,cyl,xlab = "Miles Per Gallon",)
title(main = "MPG Distribution By Car Cylinders")
colfill <- c(2:(1+length(levels(cyl.f))))
legend(locator(1),levels(cyl.f),fill = colfill)
detach(mtcars)
attach(mtcars)
cyl.f <- factor(cyl, levels = c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
sm.density.compare(mpg,cyl,xlab = "Miles Per Gallon",)
title(main = "MPG Distribution By Car Cylinders")
colfill <- c(2:(1+length(levels(cyl.f))))
legend(locator(1),levels(cyl.f),fill = colfill)
detach(mtcars)
par(mfrow=c(1,1))
legend(locator(1),levels(cyl.f),fill = colfill)
detach(mtcars)
attach(mtcars)
cyl.f <- factor(cyl, levels = c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
sm.density.compare(mpg,cyl,xlab = "Miles Per Gallon",)
title(main = "MPG Distribution By Car Cylinders")
colfill <- c(2:(1+length(levels(cyl.f))))
legend(locator(1),levels(cyl.f),fill = colfill)
detach(mtcars)
attach(mtcars)
cyl.f <- factor(cyl, levels = c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
sm.density.compare(mpg,cyl,xlab = "Miles Per Gallon",)
title(main = "MPG Distribution By Car Cylinders")
colfill <- c(2:(1+length(levels(cyl.f))))
legend(locator(1),levels(cyl.f),fill = colfill)
detach(mtcars)
#boxplots
boxplot(mtcars$mpg, main="Box plot", ylab="Miles Per Gallon")
#boxplots (cont.)
boxplot(mpg ~ cyl, data = mtcars,
main = "Car Mileage Data",
xlab = "Number Of Cylinders",
ylab = "Miles Per Gallon")
#boxplots (cont.2)
boxplot(mpg ~ cyl, data = mtcars,
notch = TRUE,
varwidth = TRUE,
col = "red",
main = "Car Mileage Data",
xlab = "Number Of Cylinders",
ylab = "Miles Per Gallon")
#box plots for two crossed factors
mtcars$cyl.f <- factor(mtcars$cyl,
levels = c(4,6,8),
labels = c("4","6","8"))
mtcars$am.f <- factor(mtcars$am,
levels = c(0,1),
labels = c("auto","standard"))
boxplot(mpg ~ am.f * cyl.f,
data = mtcars,
varwidth = TRUE,
col = c("gold", "darkgreen"),
main = "MPG Distribution By Auto Type",
xlab = "Auto Type",
ylab = "Miles Per Gallon")
#violin plots
library(vioplot)
#violin plots
install.packages("vioplot")
library(vioplot)
x1 <- mtcars$mpg[mtcars$cyl==4]
x2 <- mtcars$mpg[mtcars$cyl==6]
x1 <- mtcars$mpg[mtcars$cyl==8]
x3 <- mtcars$mpg[mtcars$cyl==8]
x1 <- mtcars$mpg[mtcars$cyl==4]
vioplot(x1,x2,x3,
names = c("4 cyl","6 cyl","8 cyl"),
col = "gold")
#dot plots
dotchart(mtcars$mpg, labels = row.names(mtcars), cex=0.7,
main = "Gas Mileage For Car Models",
xlab = "Miles Per Gallon")
x <- mtcars[order(mtcars$mpg)]
x$cyl <- factor(x$cyl)
x$color[x$cyl==4] <- "red"
x$color[x$cyl==6] <- "blue"
x$color[x$cyl==8] <- "darkgreen"
#dot plots (cont.)
x <- mtcars[order(mtcars$mpg)]
#dot plots (cont.)
x <- mtcars[order(mtcars$mpg),]
x$cyl <- factor(x$cyl)
source('~/R/R In Action/chapter 6 - basic graphs.R', echo=TRUE)
#dot plots (cont.)
x <- mtcars[order(mtcars$mpg),]
x$cyl <- factor(x$cyl)
x$color[x$cyl==4] <- "red"
x$color[x$cyl==6] <- "blue"
x$color[x$cyl==8] <- "darkgreen"
dotchart(x$mpg,
labels = row.names(x),
cex=0.7,
groups = x$cyl,
gcolor = "black",
pch = 19,
main = "Gas Mileage For Car Models\ngrouped by cylinder",
xlab = "Miles Per Gallon")
mydata <- schrute::theoffice
token.mydata <- mydata %>%
tidytext::unnest_tokens(word, text)
library(schrute)
library(tidytext)
library(tidyverse)
library(RColorBrewer)
library(formattable)
mydata <- schrute::theoffice
token.mydata <- mydata %>%
tidytext::unnest_tokens(word, text)
stop_words <- tidytext::stop_words
tidy.token.mydata <- token.mydata %>%
dplyr::anti_join(stop_words, by = "word")
chart.characters <- c("Phyllis","Oscar","Pam",
"Toby","Dwight","Michael")
chart.data$character <- factor(chart.data$character,
levels = chart.characters)
chart.data <- count.token.mydata %>%
filter(character %in% chart.characters)
count.token.mydata <- token.mydata %>%
group_by(index) %>%
mutate(words = table(index)) %>%
distinct(index, .keep_all = TRUE)
words.per.line <- count.token.mydata %>%
group_by(character) %>%
summarise(mean = mean(words),
count = n()) %>%
filter(count > 600)
table.data <- words.per.line[,1:2]
table.data <- table.data[order(-table.data$`Words Per Line`),]
table.data$`Words Per Line` <- round(table.data$`Words Per Line`, digits = 1)
table.data$Rank <- order(table.data$`Words Per Line`, decreasing = TRUE)
table.data <- data.frame(table.data$Rank, table.data$Character, table.data$`Words Per Line`)
names(table.data)[1] <- "Rank"
names(table.data)[2] <- "Character"
names(table.data)[3] <- "Words Per Line"
library(schrute)
words.per.line <- count.token.mydata %>%
group_by(character) %>%
summarise(mean = mean(words),
count = n()) %>%
filter(count > 600)
View(words.per.line)
table.data <- words.per.line[,1:2]
table.data <- table.data[order(-table.data$`Words Per Line`),]
table.data$`Words Per Line` <- round(table.data$`Words Per Line`, digits = 1)
View(words.per.line)
table.data <- table.data[order(-table.data$mean),]
table.data$mean <- round(table.data$mean, digits = 1)
View(table.data)
table.data$Rank <- order(table.data$mean, decreasing = TRUE)
table.data <- data.frame(table.data$Rank, table.data$Character, table.data$`Words Per Line`)
View(table.data)
names(table.data)[1] <- "Rank"
names(table.data)[2] <- "Character"
names(table.data)[3] <- "Words Per Line"
table.data <- data.frame(table.data$Rank, table.data$Character, table.data$`Words Per Line`)
View(table.data)
View(table.data)
table.data <- words.per.line[,1:2]
table.data <- table.data[order(-table.data$mean),]
table.data$mean <- round(table.data$mean, digits = 1)
table.data$Rank <- order(table.data$mean, decreasing = TRUE)
View(table.data)
table.data <- data.frame(table.data$Rank, table.data$character, table.data$mean)
names(table.data)[1] <- "Rank"
names(table.data)[2] <- "Character"
names(table.data)[3] <- "Words Per Line"
View(table.data)
chart.characters <- c("Phyllis","Oscar","Pam",
"Toby","Dwight","Michael")
chart.data$character <- factor(chart.data$character,
levels = chart.characters)
chart.data <- count.token.mydata %>%
filter(character %in% chart.characters)
chart.data$character <- factor(chart.data$character,
levels = chart.characters)
sample <- sample(1:nrow(chart.data),5000)
chart.data.sample <- chart.data[sample,]
chart.data.sample %>%
ggplot(aes(x = character, y = words, color = character)) +
geom_jitter(width = 0.35, alpha = 0.6) +
stat_summary(fun.y = "median", color = "black", geom = "point") +
theme_void() +
coord_flip() +
scale_color_brewer(palette = "Set2")
formattable(table.data, list(
Character = formatter("span", style = x ~ ifelse(x == "Michael", style(color = "#FFD92F", font.weight = "bold"),
ifelse(x == "Dwight", style(color = "#A6D854", font.weight = "bold"),
ifelse(x == "Toby", style(color = "#E78AC3", font.weight = "bold"),
ifelse(x == "Pam", style(color = "#8DA0CB", font.weight = "bold"),
ifelse(x == "Oscar", style(color = "#FC8D62", font.weight = "bold"),
ifelse(x == "Phyllis", style(color = "#66C2A5", font.weight = "bold"), NA)))))))))
chart.data %>%
ggplot(aes(x = character, y = words, color = character)) +
geom_jitter(width = 0.35, alpha = 0.6) +
stat_summary(fun.y = "median", color = "black", geom = "point") +
theme_void() +
coord_flip() +
scale_color_brewer(palette = "Set2")
View(words.per.line)
chart.characters <- c("Phyllis","Oscar","Pam",
"Darryl","Dwight","Michael")
chart.data <- count.token.mydata %>%
filter(character %in% chart.characters)
chart.data$character <- factor(chart.data$character,
levels = chart.characters)
chart.data %>%
ggplot(aes(x = character, y = words, color = character)) +
geom_jitter(width = 0.35, alpha = 0.6) +
stat_summary(fun.y = "median", color = "black", geom = "point") +
theme_void() +
coord_flip() +
scale_color_brewer(palette = "Set2") +
brewer.pal(n = 6, name = 'Set2')
chart.data %>%
ggplot(aes(x = character, y = words, color = character)) +
geom_jitter(width = 0.35, alpha = 0.6) +
stat_summary(fun.y = "median", color = "black", geom = "point") +
theme_void() +
coord_flip() +
scale_color_brewer(palette = "Set2")
formattable(table.data, list(
Character = formatter("span", style = x ~ ifelse(x == "Michael", style(color = "#FFD92F", font.weight = "bold"),
ifelse(x == "Dwight", style(color = "#A6D854", font.weight = "bold"),
ifelse(x == "Darryl", style(color = "#E78AC3", font.weight = "bold"),
ifelse(x == "Pam", style(color = "#8DA0CB", font.weight = "bold"),
ifelse(x == "Oscar", style(color = "#FC8D62", font.weight = "bold"),
ifelse(x == "Phyllis", style(color = "#66C2A5", font.weight = "bold"), NA)))))))))
formattable(table.data, list(
Character = formatter("span", style = x ~ ifelse(x == "Michael", style(color = "#FFD92F", font.weight = "bold"),
ifelse(x == "Dwight", style(color = "#A6D854", font.weight = "bold"),
ifelse(x == "Jim", style(color = "#E78AC3", font.weight = "bold"),
ifelse(x == "Pam", style(color = "#8DA0CB", font.weight = "bold"),
ifelse(x == "Oscar", style(color = "#FC8D62", font.weight = "bold"),
ifelse(x == "Phyllis", style(color = "#66C2A5", font.weight = "bold"), NA)))))))))
chart.data %>%
ggplot(aes(x = character, y = words, color = character)) +
geom_jitter(width = 0.35, alpha = 0.6) +
stat_summary(fun.y = "median", color = "black", geom = "point") +
theme_void() +
coord_flip() +
scale_color_brewer(palette = "Set2")
chart.characters <- c("Phyllis","Oscar","Pam",
"Jim","Dwight","Michael")
chart.data <- count.token.mydata %>%
filter(character %in% chart.characters)
chart.data$character <- factor(chart.data$character,
levels = chart.characters)
chart.data %>%
ggplot(aes(x = character, y = words, color = character)) +
geom_jitter(width = 0.35, alpha = 0.6) +
stat_summary(fun.y = "median", color = "black", geom = "point") +
theme_void() +
coord_flip() +
scale_color_brewer(palette = "Set2")
chart.data %>%
ggplot(aes(x = character, y = words, color = character)) +
geom_jitter(width = 0.35, alpha = 0.6) +
stat_summary(fun.y = "mean", color = "black", geom = "point") +
theme_void() +
coord_flip() +
scale_color_brewer(palette = "Set2")
View(words.per.line)
chart.data %>%
ggplot(aes(x = character, y = words, color = character)) +
geom_jitter(width = 0.35, alpha = 0.6) +
stat_summary(fun.y = "mean", color = "black", geom = "point") +
theme_void() +
coord_flip() +
scale_color_brewer(palette = "Set2") +
labs(title = "How Long Are Each Character's Lines In The Office?",
subtitle = "Minimum 600 Lines",
caption = "Data From {schrute} | #TidyTuesday | @surdek10")
chart.data %>%
ggplot(aes(x = character, y = words, color = character)) +
geom_jitter(width = 0.35, alpha = 0.6) +
stat_summary(fun.y = "mean", color = "black", geom = "point") +
theme_void() +
coord_flip() +
scale_color_brewer(palette = "Set2") +
labs(title = "Which Characters Have Longer Lines In The Office?",
caption = "Data From {schrute} | #TidyTuesday | @surdek10")
library(schrute)
library(tidytext)
library(tidyverse)
library(RColorBrewer)
library(formattable)
mydata <- schrute::theoffice
token.mydata <- mydata %>%
tidytext::unnest_tokens(word, text)
count.token.mydata <- token.mydata %>%
group_by(index) %>%
mutate(words = table(index)) %>%
distinct(index, .keep_all = TRUE)
words.per.line <- count.token.mydata %>%
group_by(character) %>%
summarise(mean = mean(words),
count = n()) %>%
filter(count > 600)
View(count.token.mydata)
View(count.token.mydata)
install.packages("installr")
library(installr)
updateR()
updateR()
myvars <- c("mpg", "hp", "wt")
head(myvars)
head(mtcars[myvars])
summary(mtcars[myvars])
mystats <- function(x, na.omit = FALSE) {
if (na.omit)
x <- x[!is.na(x)]
m <- mean(x)
n <- length(x)
s <- sd(x)
skew <- sum((x-m)^3/s^3)/n
kurt <- sum((x-m)^4/s^4)/n-3
return(c(n = n, mean = m, stdev = s, skew = skew, kurtosis = kurt))
}
sapply(mtcars[myvars], mystats)
library(Hmisc)
describe(mtcars[myvars])
library(pastecs)
install.packages("pastecs")
library(pastecs)
stat.desc(mtcars[myvars])
install.packages(psych)
install.packages("psych")
library(psych)
describe(mtcars[myvars])
aggregate(mtcars[myvars], by=list(am=mtcars$am), mean)
aggregate(mtcars[myvars], by=list(am=mtcars$am), sd)
dstats <- function(x)sapply(x, mystats)
by(mtcars[myvars], mtcars$am, dstats)
install.packages("doBy")
library(doBy)
summaryBy(mpg+hp+wt~am, data = mtcars, FUN = mystats)
summaryBy(mpg+hp+wt~am, data = mtcars, FUN = mystats)
summaryBy(mpg+hp+wt~am, data = mtcars, FUN = mystats
summaryBy(mpg+hp+wt~am, data = mtcars, FUN = mystats)
summaryBy(mpg+hp+wt~am, data = mtcars, FUN = mystats)
summaryBy(mpg+hp+wt~am, data = mtcars, FUN = mystats)
describeBy(mtcars[myvars], list(am=mtcars$am))
library(vcd)
head(Arthritis)
mytable <- with(Arthritis, table(Improved))
mytable
prop.table(mytable)
mytable <- xtabs(~ Treatment + Improved, data = Arthritis)
mytable
margin.table(mytable, 1)
prop.table(mytable, 1)
margin.table(mytable, 2)
prop.table(mytable, 2)
addmargins(mytable)
addmargins(prop.table(mytable))
addmargins(prop.table(mytable, 1), 2)
addmargins(prop.table(mytable, 2), 1)
install.packages("gmodels")
library(gmodels)
CrossTable(Arthritis$Treatment, Arthritis$Improved)
mytable <- xtabs(~ Treatment + Sex + Improved, data = Arthritis)
mytable
ftable(mytable)
margin.table(mytable)
margin.table(mytable,1)
margin.table(mytable, 2)
margin.table(mytable, 3)
margin.table(mytable, c(1,3))
ftable(prop.table(mytable, c(1,2)))
ftable(addmargins(prop.table(mytable, c(1,2))), 3)
ftable(addmargins(prop.table(mytable, c(1,2)),3))
ftable(addmargins(prop.table(mytable, c(1,2)),3)) * 100
mytable <- xtabs(~ Treatment + Improved, data = Arthritis)
chisq.test(mytable)
mytable <- xtabs(~ Improved + Sex, data = Arthritis)
chisq.test(mytable)
mytable <- xtabs(~ Treatment + Improved, data = Arthritis)
fisher.test(mytable)
mytable <- xtabs(~ Improved + Sex, data = Arthritis)
mantelhaen.test(mytable)
mytable <- xtabs(~ Treatment + Sex + Improved, data = Arthritis)
mantelhaen.test(mytable)
mytable <- xtabs(~ Treatment + Improved, data = Arthritis)
assocstats(myt)
assocstats(mytable)
state.x77
states <- state.x77[,1:6]
cov(states)
cor(states)
cor(states, method = "spearman")
x <- states[,c("Population", "Income", "Illiteracy", "HS Grad")]
y <- states[,c("Life Exp", "Murder")]
cor(x,y)
install.packages("ggm")
library(ggm)
colnames(states)
pcor(c(1,5,2,3,6), cov(states))
install.packages("polycor")
library(polcor)
source('~/R/R In Action/chapter 7 - basic statistics.R', echo=TRUE)
library(polycor)
cor.test(states[,3], states[,5])
corr.test(states, use = "complete")
UScrime
install.packages("MASS")
library("MASS")
UScrime
t.test(Prob ~ So, data = UScrime)
sapply(UScrime[c("U1", "U2")], function(x)(c(mean=mean(x), sd=sd(x))))
with(UScrime, t.test(U1, U2, paired = TRUE))
with(UScrime, by(Prob, So, median))
wilcox.test(Prob ~ So, data = UScrime)
with(UScrime, wilcox.test(U1, U2, paired = TRUE))
states <- data.frame(state.region, state.x77)
kruskal.test(Illiteracy ~ state.region, data = states)
source("http://www.statmethods.net/RiA/wmc.txt")
wmc(Illiteracy ~ state.regiona, data = states, method = "holm")
wmc(Illiteracy ~ state.regions, data = states, method = "holm")
states <- data.frame(state.region, state.x77)
wmc(Illiteracy ~ state.region, data = states, method = "holm")
pkg <- "npar_1.0.tar.gz"
loc <- "hhtp://www.statmethods.net/RiA"
url <- paste(loc, pkg, sep = "/")
download.file(url, pkg)
install.packages(pkg, repos = NULL, type = "source")
loc <- "http://www.statmethods.net/RiA"
url <- paste(loc, pkg, sep = "/")
download.file(url, pkg)
install.packages(pkg, repos = NULL, type = "source")
#nonparametric analysis and the npar package
library(npar)
hist(life$hlef, xlab = "Healthy Life Expectancy (years) at Age 65",
main = "Distribution of Healthy Life Expectancy for Women",
col = "grey", breaks = 10)
ggplot(data = life, aes(x = region, y = hlef)) +
geom_point(size = 3, color = "darkgrey") +
labs(title = "Distribution of HLE Estimates by Region",
x = "US Region",
y = "Healthy Life Expectancy at Age 65") +
theme_bw()
library(tidyverse)
ggplot(data = life, aes(x = region, y = hlef)) +
geom_point(size = 3, color = "darkgrey") +
labs(title = "Distribution of HLE Estimates by Region",
x = "US Region",
y = "Healthy Life Expectancy at Age 65") +
theme_bw()
hist(life$hlef, xlab = "Healthy Life Expectancy (years) at Age 65",
main = "Distribution of Healthy Life Expectancy for Women",
col = "grey", breaks = 10)
#comparing groups with the npar package
results <- oneway(hlef ~ region, life)
summary(results)
plot(results, col = "lightblue", main = "Multiple Comparisons",
xlab = "US Region",
ylab = "Healthy Life Expectancy (years) at Age 65")
print(results)
summary(results)
plot(results, col = "lightblue", main = "Multiple Comparisons",
xlab = "US Region",
ylab = "Healthy Life Expectancy (years) at Age 65")
library(rmarkdown)
install.packages("xtable")
library(xtable)
head(women)
install.packages("R2wd")
library(R2wd)
install.packages(RDCOMClient_0.93-0.tar.gz, repos = NULL, type = "source")
